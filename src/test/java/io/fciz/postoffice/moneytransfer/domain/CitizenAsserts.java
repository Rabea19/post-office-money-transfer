package io.fciz.postoffice.moneytransfer.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CitizenAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenAllPropertiesEquals(Citizen expected, Citizen actual) {
        assertCitizenAutoGeneratedPropertiesEquals(expected, actual);
        assertCitizenAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenAllUpdatablePropertiesEquals(Citizen expected, Citizen actual) {
        assertCitizenUpdatableFieldsEquals(expected, actual);
        assertCitizenUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenAutoGeneratedPropertiesEquals(Citizen expected, Citizen actual) {
        assertThat(expected)
            .as("Verify Citizen auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenUpdatableFieldsEquals(Citizen expected, Citizen actual) {
        assertThat(expected)
            .as("Verify Citizen relevant properties")
            .satisfies(e -> assertThat(e.getNationalId()).as("check nationalId").isEqualTo(actual.getNationalId()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenUpdatableRelationshipsEquals(Citizen expected, Citizen actual) {}
}
